import { Localization, VDOM } from "cx/ui";
import { Icon } from "cx/widgets";

var _extends =
	Object.assign ||
	function(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];

			for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}

		return target;
	};

function applyThemeOverrides() {
	Localization.override("cx/widgets/Dropdown", {
		arrow: false,
		offset: 0,
		elementExplode: 0
	});

	Localization.override("cx/widgets/Window", {
		animate: true,
		destroyDelay: 200
	});

	Localization.override("cx/widgets/MenuItem", {
		dropdownOptions: {
			pad: false
		}
	});

	// enable wrapper focus tracking so appropriate css class can be applied to it
	Localization.override("cx/widgets/Field", {
		trackFocus: true
	});

	// set all MsgBox buttons to flat-primary
	Localization.override("cx/widgets/MsgBox", {
		buttonMod: "flat-primary",
		footerDirection: "row-reverse",
		footerJustify: "start"
	});

	// show all borders on all grids
	Localization.override("cx/widgets/Grid", {
		showBorder: true
	});

	// material icons added
	Icon.registerFactory(function(name, props) {
		return VDOM.createElement(
			"i",
			_extends({}, props, {
				className: "material-icons " + (props.className || "")
			}),
			name
		);
	});

	Icon.unregister("close");
	Icon.unregister("folder");

	Icon.register("calendar", function(props) {
		return Icon.render("date_range", props);
	});
	Icon.register("drop-down", function(props) {
		return Icon.render("keyboard_arrow_down", props);
	});
	Icon.register("sort-asc", function(props) {
		return Icon.render("arrow_upward", props);
	});
	Icon.register("folder-open", function(props) {
		return Icon.render("folder_open", props);
	});
	Icon.register("file", function(props) {
		return Icon.render("insert_drive_file", props);
	});

	Icon.register("forward", function(props) {
		return VDOM.createElement(
			"svg",
			_extends({}, props, {
				viewBox: "0 0 24 24"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				strokeWidth: "0",
				stroke: "currentColor",
				d: "M11.59 16.34l4.58-4.59-4.58-4.59L13 5.75l6 6-6 6z"
			}),
			VDOM.createElement("path", {
				fill: "currentColor",
				strokeWidth: "0",
				stroke: "currentColor",
				d: "M4.59 16.34l4.58-4.59-4.58-4.59L6 5.75l6 6-6 6z"
			})
		);
	});
}

applyThemeOverrides();

function enableMaterialLabelPlacement() {
	Localization.override("cx/widgets/Field", {
		labelPlacement: "material"
	});
	Localization.override("cx/widgets/LabeledContainer", {
		labelPlacement: "material"
	});
}

function enableMaterialHelpPlacement() {
	Localization.override("cx/widgets/Field", {
		helpPlacement: "material",
		validationMode: "help"
	});
}

export { applyThemeOverrides, enableMaterialLabelPlacement, enableMaterialHelpPlacement };
